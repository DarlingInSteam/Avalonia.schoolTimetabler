using System.Collections.Generic;using System.Collections.ObjectModel;using System.Reactive;using Data.Repositories;using Data.Repository;using Domain.Entities;using Domain.UseCases;using MessageBox.Avalonia;using ReactiveUI;namespace SchoolTimetabler.ViewModels;public class TeacherEditingMenuViewModel : ViewModelBase, IRoutableViewModel, IScreen{    private int _dataGridSelectedIndex;    private bool _isEnableNext = true;    private bool _isVisibleAddDiscipline;    private bool _isVisibleAddTeacher = true;    private bool _isVisibleDataGrid = true;    private string _teacherName;    private int _selectedIndexCheckBox;    private List<string> _selectedIndexListBox;    private int _selectedIndexTeacherDisciplines;    private readonly TeacherInteractor _teacherInteractor;    public TeacherEditingMenuViewModel(CreateSchoolProfileViewModel createSchoolProfileViewModel)    {        DisciplinesName = new ObservableCollection<string>();        DisciplinesTeacher = new ObservableCollection<string>();        TeachersName = new ObservableCollection<string>();                _selectedIndexListBox = new List<string>();                _teacherInteractor = new TeacherInteractor(TeacherRepository.GetInstance());        var disciplineInteractor = new DisciplineInteractor(DisciplineRepository.GetInstance());        Teachers = new ObservableCollection<Teacher>(_teacherInteractor.GetTeachers());        Disciplines = new ObservableCollection<Discipline>(disciplineInteractor.GetDisciplines());                AddDesciplineToTeacher = ReactiveCommand.Create(() =>        {            _teacherInteractor.AddDiscipline(_selectedIndexListBox, _selectedIndexCheckBox);            Teachers.Clear();            TeachersName.Clear();            foreach (var t in _teacherInteractor.GetTeachers())            {                Teachers.Add(t);                TeachersName.Add(t.TeacherFullName);            }        });        Back = ReactiveCommand.Create(() =>        {            IsVisibleDataGrid = true;            IsVisibleAddTeacher = true;            IsVisibleAddDiscipline = false;            IsEnableNext = true;        });        DeleteTeacherDiscipline = ReactiveCommand.Create(() =>        {            _teacherInteractor.DeleteDiscipline(_selectedIndexTeacherDisciplines, _selectedIndexCheckBox);            DisciplinesTeacher.Clear();            foreach (var t in _teacherInteractor.GetTeacherDisciplines(_selectedIndexCheckBox))            {                DisciplinesTeacher.Add(t);            }        });        AddDescipline = ReactiveCommand.Create(() =>        {            DisciplinesName.Clear();            TeachersName.Clear();            foreach (var t in Disciplines)            {                DisciplinesName.Add(t.DisciplineName);            }            foreach (var t in Teachers) TeachersName.Add(t.TeacherFullName);            IsVisibleDataGrid = false;            IsVisibleAddTeacher = false;            IsVisibleAddDiscipline = true;            IsEnableNext = false;        });        AddNewTeacher = ReactiveCommand.Create(() =>        {            _teacherInteractor.AddTeacher(TeacherName);            Teachers.Clear();            foreach (var t in _teacherInteractor.GetTeachers())            {                Teachers.Add(t);            }        });        DeleteTeacher = ReactiveCommand.Create(() =>        {            _teacherInteractor.DeleteTeacher(Teachers[_dataGridSelectedIndex]);            Teachers.Remove(Teachers[_dataGridSelectedIndex]);        });    }    public ObservableCollection<Teacher> Teachers { get; set; }    public ObservableCollection<Discipline> Disciplines { get; set; }    public ObservableCollection<string> DisciplinesName { get; set; }    public ObservableCollection<string> TeachersName { get; set; }    public ObservableCollection<string> DisciplinesTeacher { get; set; }    public ReactiveCommand<Unit, Unit> DeleteTeacherDiscipline { get; }    public ReactiveCommand<Unit, Unit> Back { get; }    public ReactiveCommand<Unit, Unit> AddDesciplineToTeacher { get; }    public ReactiveCommand<Unit, Unit> AddNewTeacher { get; }    public ReactiveCommand<Unit, Unit> DeleteTeacher { get; }    public ReactiveCommand<Unit, Unit> AddDescipline { get; }    private bool _isVisibleDisciplineInfo = false;    private void Update()    {        var t = _teacherInteractor.GetTeacherDisciplines(_selectedIndexCheckBox);        if (t.Count != 0)        {            DisciplinesTeacher.Clear();            foreach (var di in t)            {                DisciplinesTeacher.Add(di);            }            IsVisibleDisciplineInfo = true;        }    }    public int SelectedIndexCheckBox    {        get => _selectedIndexCheckBox;        set        {            this.RaiseAndSetIfChanged(ref _selectedIndexCheckBox, value);            IsVisibleDisciplineInfo = false;            Update();        }    }    public int SelectedIndexTeacherDisciplines    {        get => _selectedIndexTeacherDisciplines;        set => this.RaiseAndSetIfChanged(ref _selectedIndexTeacherDisciplines, value);    }    public string TeacherName    {        get => _teacherName;        set => this.RaiseAndSetIfChanged(ref _teacherName, value);    }    public bool IsEnableNext    {        get => _isEnableNext;        set => this.RaiseAndSetIfChanged(ref _isEnableNext, value);    }    public bool IsVisibleDisciplineInfo    {        get => _isVisibleDisciplineInfo;        set => this.RaiseAndSetIfChanged(ref _isVisibleDisciplineInfo, value);    }    public bool IsVisibleAddTeacher    {        get => _isVisibleAddTeacher;        set => this.RaiseAndSetIfChanged(ref _isVisibleAddTeacher, value);    }    public bool IsVisibleDataGrid    {        get => _isVisibleDataGrid;        set => this.RaiseAndSetIfChanged(ref _isVisibleDataGrid, value);    }    public bool IsVisibleAddDiscipline    {        get => _isVisibleAddDiscipline;        set => this.RaiseAndSetIfChanged(ref _isVisibleAddDiscipline, value);    }    public List<string> SelectedIndexListBox    {        get => _selectedIndexListBox;        set => this.RaiseAndSetIfChanged(ref _selectedIndexListBox, value);    }    public int DataGridSelectedIndex    {        set => this.RaiseAndSetIfChanged(ref _dataGridSelectedIndex, value);        get => _dataGridSelectedIndex;    }    public string? UrlPathSegment { get; }    public IScreen HostScreen { get; }    public RoutingState Router { get; }}