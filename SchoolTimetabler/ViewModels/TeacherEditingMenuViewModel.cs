using System.Collections.Generic;using System.Collections.ObjectModel;using System.Reactive;using Data.FakeDataBase;using Data.Models;using Data.Repositories;using Data.Repository;using Domain.Entities;using Domain.UseCases;using MessageBox.Avalonia;using ReactiveUI;namespace SchoolTimetabler.ViewModels;public class TeacherEditingMenuViewModel : ViewModelBase, IRoutableViewModel, IScreen{    private int _dataGridSelectedIndex;    private bool _isEnableNext = true;    private bool _isVisibleAddDiscipline;    private bool _isVisibleAddTeacher = true;    private bool _isVisibleDataGrid = true;    private int _selectedIndex;    private int _selectedIndexCheckBox;    private List<string> _selectedIndexListBox;    private readonly TeacherInteractor _teacherInteractor;    private readonly DisciplineInteractor _disciplineInteractor;    public TeacherEditingMenuViewModel(CreateSchoolProfileViewModel createSchoolProfileViewModel)    {        DisciplinesName = new ObservableCollection<string>();        TeachersName = new ObservableCollection<string>();        _selectedIndexListBox = new List<string>();        _teacherInteractor = new TeacherInteractor(TeacherRepository.GetInstance());        _disciplineInteractor = new DisciplineInteractor(DisciplineRepository.GetInstance());        Teachers = new ObservableCollection<Teacher>(_teacherInteractor.GetTeachers());        Disciplines = new ObservableCollection<Discipline>(_disciplineInteractor.GetDisciplines());        AddDesciplineToTeacher = ReactiveCommand.Create(() =>        {            var message = MessageBoxManager.GetMessageBoxStandardWindow("Оповещение",                "Дисциплины успешно добавлены преподавателю.");            message.Show();            _teacherInteractor.AddDiscipline(_selectedIndexListBox, _selectedIndexCheckBox);        });        Back = ReactiveCommand.Create(() =>        {            IsVisibleDataGrid = true;            IsVisibleAddTeacher = true;            IsVisibleAddDiscipline = false;            IsEnableNext = true;        });        AddDescipline = ReactiveCommand.Create(() =>        {            DisciplinesName.Clear();            TeachersName.Clear();            foreach (var t in Disciplines) DisciplinesName.Add(t.DisciplineName);            foreach (var t in Teachers) TeachersName.Add(t.TeacherFullName);            IsVisibleDataGrid = false;            IsVisibleAddTeacher = false;            IsVisibleAddDiscipline = true;            IsEnableNext = false;        });        AddNewTeacher = ReactiveCommand.Create(() =>        {            var schoolTeacher = new Teacher("Новое ФИО учителя");            _teacherInteractor.AddTeacher(schoolTeacher);            Teachers.Add(schoolTeacher);        });        DeleteTeacher = ReactiveCommand.Create(() =>        {            _teacherInteractor.DeleteTeacher(Teachers[_dataGridSelectedIndex]);            Teachers.Remove(Teachers[_dataGridSelectedIndex]);        });    }    public ObservableCollection<Teacher> Teachers { get; set; }    public ObservableCollection<Discipline> Disciplines { get; set; }    public ObservableCollection<string> DisciplinesName { get; set; }    public ObservableCollection<string> TeachersName { get; set; }    public ReactiveCommand<Unit, Unit> Back { get; }    public ReactiveCommand<Unit, Unit> AddDesciplineToTeacher { get; }    public ReactiveCommand<Unit, Unit> AddNewTeacher { get; }    public ReactiveCommand<Unit, Unit> DeleteTeacher { get; }    public ReactiveCommand<Unit, Unit> AddDescipline { get; }    public int SelectedIndexCheckBox    {        get => _selectedIndexCheckBox;        set => this.RaiseAndSetIfChanged(ref _selectedIndexCheckBox, value);    }    public bool IsEnableNext    {        get => _isEnableNext;        set => this.RaiseAndSetIfChanged(ref _isEnableNext, value);    }    public bool IsVisibleAddTeacher    {        get => _isVisibleAddTeacher;        set => this.RaiseAndSetIfChanged(ref _isVisibleAddTeacher, value);    }    public bool IsVisibleDataGrid    {        get => _isVisibleDataGrid;        set => this.RaiseAndSetIfChanged(ref _isVisibleDataGrid, value);    }    public bool IsVisibleAddDiscipline    {        get => _isVisibleAddDiscipline;        set => this.RaiseAndSetIfChanged(ref _isVisibleAddDiscipline, value);    }    public List<string> SelectedIndexListBox    {        get => _selectedIndexListBox;        set => this.RaiseAndSetIfChanged(ref _selectedIndexListBox, value);    }    public int DataGridSelectedIndex    {        set => this.RaiseAndSetIfChanged(ref _dataGridSelectedIndex, value);        get => _dataGridSelectedIndex;    }    public string? UrlPathSegment { get; }    public IScreen HostScreen { get; }    public RoutingState Router { get; }}