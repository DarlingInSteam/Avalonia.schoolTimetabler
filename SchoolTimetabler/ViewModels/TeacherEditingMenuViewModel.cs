using System.Collections.Generic;using System.Collections.ObjectModel;using System.Reactive;using Avalonia.Controls;using Avalonia.Controls.Templates;using Data.FakeDataBase;using Data.Models;using ReactiveUI;namespace SchoolTimetabler.ViewModels;public class TeacherEditingMenuViewModel : ViewModelBase, IRoutableViewModel, IScreen{    private int _selectedIndex;    private int _dataGridSelectedIndex;        private bool _isEnableAddTeacher = true;    public ObservableCollection<Data.Models.SchoolTeachers> Teachers { get; set; }    public ObservableCollection<Data.Models.SchoolDiscipline> Disciplines { get; set; }    public List<string> DisciplinesName { get; set; }        public ReactiveCommand<Unit, Unit> AddNewTeacher { get; }    public ReactiveCommand<Unit, Unit> DeleteTeacher { get; }    public ReactiveCommand<Unit, Unit> AddDescipline { get; }    private FDataBaseTeachers _storage;    private FDataBaseDisciplines _storageDisciplines;    public TeacherEditingMenuViewModel(CreateSchoolProfileViewModel createSchoolProfileViewModel,        FDataBaseTeachers storage, FDataBaseDisciplines storageDisciplines)    {        _storage = storage;        _storageDisciplines = storageDisciplines;        DisciplinesName = new List<string>();        Teachers = new ObservableCollection<Data.Models.SchoolTeachers>(_storage.SchoolTeachers);        Disciplines = new ObservableCollection<Data.Models.SchoolDiscipline>(_storageDisciplines.SchoolDisciplines);        foreach (var t in Disciplines)        {            DisciplinesName.Add(t.DisciplineName);        }        AddDescipline = ReactiveCommand.Create(() =>        {            var schoolTeacher = new Data.Models.SchoolTeachers(Teachers[_dataGridSelectedIndex].TeacherFullName,                DisciplinesName[_selectedIndex]);            _storage.DeleteDiscipline(_dataGridSelectedIndex);            Teachers.Remove(Teachers[_dataGridSelectedIndex]);            _storage.AddTeacher(schoolTeacher);            Teachers.Add(schoolTeacher);            IsEnableAddteacher = true;        });                AddNewTeacher = ReactiveCommand.Create(() =>        {            var schoolTeacher = new Data.Models.SchoolTeachers("Новое ФИО учителя", "Хуйня");            _storage.AddTeacher(schoolTeacher);            Teachers.Add(schoolTeacher);            IsEnableAddteacher = false;        });        DeleteTeacher = ReactiveCommand.Create(() =>        {            _storage.DeleteDiscipline(_dataGridSelectedIndex);            Teachers.Remove(Teachers[_dataGridSelectedIndex]);        });    }    // public void SelectedDisciplineAdd()    // {    //     _storage.AddDiscipline(DisciplinesName[_selectedIndex], _selectedIndex);    // }        public bool IsEnableAddteacher    {        get => _isEnableAddTeacher;        set => this.RaiseAndSetIfChanged(ref _isEnableAddTeacher, value);    }        public int SelectedIndex    {        get => _selectedIndex;        set => this.RaiseAndSetIfChanged(ref _selectedIndex, value);    }    public int DataGridSelectedIndex    {         set => this.RaiseAndSetIfChanged(ref _dataGridSelectedIndex, value);         get => _dataGridSelectedIndex;     }        public string? UrlPathSegment { get; }    public IScreen HostScreen { get; }    public RoutingState Router { get; }}