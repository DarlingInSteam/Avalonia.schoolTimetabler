using System.Collections.Generic;using System.Collections.ObjectModel;using System.Reactive;using Avalonia.Controls;using Avalonia.Controls.Templates;using Data.FakeDataBase;using Data.Models;using ReactiveUI;namespace SchoolTimetabler.ViewModels;public class TeacherEditingMenuViewModel : ViewModelBase, IRoutableViewModel, IScreen{    private int _selectedIndex;    private int _dataGridSelectedIndex;    private bool _isVisibleDataGrid = true;    private bool _isVisibleAddTeacher = true;    private bool _isVisibleAddDiscipline = false;    private List<string> _selectedIndexListBox;    private int _selectedIndexCheckBox;    public ObservableCollection<Data.Models.SchoolTeachers> Teachers { get; set; }    public ObservableCollection<Data.Models.SchoolDiscipline> Disciplines { get; set; }    public ObservableCollection<string>DisciplinesName { get; set; }    public ObservableCollection<string> TeachersName { get; set; }    public ReactiveCommand<Unit, Unit> Back { get; }    public ReactiveCommand<Unit, Unit> AddDesciplineToTeacher { get; }    public ReactiveCommand<Unit, Unit> AddNewTeacher { get; }    public ReactiveCommand<Unit, Unit> DeleteTeacher { get; }    public ReactiveCommand<Unit, Unit> AddDescipline { get; }    private FDataBaseTeachers _storage;    private FDataBaseDisciplines _storageDisciplines;    public TeacherEditingMenuViewModel(CreateSchoolProfileViewModel createSchoolProfileViewModel,        FDataBaseTeachers storage, FDataBaseDisciplines storageDisciplines)    {        DisciplinesName = new ObservableCollection<string>();        TeachersName = new ObservableCollection<string>();        _selectedIndexListBox = new List<string>();        _storage = storage;        _storageDisciplines = storageDisciplines;        Teachers = new ObservableCollection<Data.Models.SchoolTeachers>(_storage.SchoolTeachers);        Disciplines = new ObservableCollection<Data.Models.SchoolDiscipline>(_storageDisciplines.SchoolDisciplines);        AddDesciplineToTeacher = ReactiveCommand.Create(() =>        {            var message = MessageBox.Avalonia.MessageBoxManager.                    GetMessageBoxStandardWindow("Оповещение",                    "Дисциплины успешно добавлены преподавателю.");            message.Show();                        _storage.AddDiscipline(_selectedIndexListBox, _selectedIndexCheckBox);            _selectedIndexListBox.Clear();        });                Back = ReactiveCommand.Create(() =>        {            IsVisibleDataGrid = true;            IsVisibleAddTeacher = true;            IsVisibleAddDiscipline = false;        });        AddDescipline = ReactiveCommand.Create(() =>        {            DisciplinesName.Clear();            TeachersName.Clear();                        foreach (var t in Disciplines)            {                DisciplinesName.Add(t.DisciplineName);            }                        foreach (var t in Teachers)            {                TeachersName.Add(t.TeacherFullName);            }                        IsVisibleDataGrid = false;            IsVisibleAddTeacher = false;            IsVisibleAddDiscipline = true;        });                AddNewTeacher = ReactiveCommand.Create(() =>        {            var schoolTeacher = new Data.Models.SchoolTeachers("Новое ФИО учителя");            _storage.AddTeacher(schoolTeacher);            Teachers.Add(schoolTeacher);        });        DeleteTeacher = ReactiveCommand.Create(() =>        {            _storage.DeleteDiscipline(_dataGridSelectedIndex);            Teachers.Remove(Teachers[_dataGridSelectedIndex]);        });    }    // public void SelectedDisciplineAdd()    // {    //     _storage.AddDiscipline(DisciplinesName[_selectedIndex], _selectedIndex);    // }        public int SelectedIndexCheckBox    {        get => _selectedIndexCheckBox;        set => this.RaiseAndSetIfChanged(ref _selectedIndexCheckBox, value);    }        public bool IsVisibleAddTeacher    {        get => _isVisibleAddTeacher;        set => this.RaiseAndSetIfChanged(ref _isVisibleAddTeacher, value);    }        public bool IsVisibleDataGrid    {        get => _isVisibleDataGrid;        set => this.RaiseAndSetIfChanged(ref _isVisibleDataGrid, value);    }    public bool IsVisibleAddDiscipline    {        get => _isVisibleAddDiscipline;        set => this.RaiseAndSetIfChanged(ref _isVisibleAddDiscipline, value);    }        public List<string> SelectedIndexListBox     {        get => _selectedIndexListBox;        set => this.RaiseAndSetIfChanged(ref _selectedIndexListBox, value);    }    public int DataGridSelectedIndex    {         set => this.RaiseAndSetIfChanged(ref _dataGridSelectedIndex, value);         get => _dataGridSelectedIndex;     }        public string? UrlPathSegment { get; }    public IScreen HostScreen { get; }    public RoutingState Router { get; }}