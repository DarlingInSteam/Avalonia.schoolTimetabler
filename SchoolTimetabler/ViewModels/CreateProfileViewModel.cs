using System;using System.Reactive;using Data.FakeDataBase;using ReactiveUI;using SchoolTimetabler.Models;namespace SchoolTimetabler.ViewModels{    public class CreateSchoolProfileViewModel : ViewModelBase, IRoutableViewModel, IScreen    {        private string? _schoolNumber;        private string? _countClasses;        private string? _countTeachers;        private string?  _fullNameDirector;        private string? _fullName;        private string? _post;        public ReactiveCommand<Unit, IRoutableViewModel> GoToClassEditingMenu { get; }        public ReactiveCommand<Unit, IRoutableViewModel> GoToDisciplineEditingMenu { get; }        public ReactiveCommand<Unit, IRoutableViewModel> GoToTeacherEditingMenu { get; }        public RoutingState Router { get; } = new RoutingState();        private FakeDataBaseSchoolInfo _storage;                public CreateSchoolProfileViewModel(IScreen hostScreen,             FakeDataBaseSchoolInfo storage, FDataBaseClasses storageClasses, FDataBaseDisciplines storageDisciplines, FDataBaseTeachers storageTeachers)        {            HostScreen = hostScreen;            _storage = storage;            GoToDisciplineEditingMenu = ReactiveCommand.CreateFromObservable(                () => Router.Navigate.Execute(new DisciplineEditingMenuViewModel(this, storageDisciplines))            );            GoToClassEditingMenu = ReactiveCommand.CreateFromObservable(                () => Router.Navigate.Execute(new ClassEditingMenuViewModel(this, storageClasses))            );            GoToTeacherEditingMenu = ReactiveCommand.CreateFromObservable(                () => Router.Navigate.Execute(new TeacherEditingMenuViewModel(this, storageTeachers, storageDisciplines))            );        }                public void ConfirmSchoolSettings()        {            if (_schoolNumber == null || _fullNameDirector == null || _countClasses == null || _countTeachers == null) return;            //var confirm = new School(_schoolNumber, _fullNameDirector, _countClasses, _countTeachers);            var SchoolInfo = new Data.Models.School(_schoolNumber, _fullNameDirector, _countClasses, _countTeachers);            _storage.AddInfo(SchoolInfo);        }                public void ConfirmUserSettings()        {            if (_post == null || _fullName == null) return;            var confirm = new User(_fullName, _post);        }        public string? FullName        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _fullName, value);                }            }            get            {                if (_fullName != null)                    return _fullName;                throw new NullReferenceException();            }        }                public string? Post        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _post, value);                }            }            get            {                if (_post != null)                    return _post;                throw new NullReferenceException();            }        }                public string? SchoolNumber        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _schoolNumber, value);                }            }            get            {                if (_schoolNumber != null)                    return _schoolNumber;                                throw new NullReferenceException();            }        }        public string? FullNameDirector        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _fullNameDirector, value);                }            }            get            {                if (_fullNameDirector != null)                    return _fullNameDirector;                                throw new NullReferenceException();            }        }                public string? CountClasses        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _countClasses, value);                }            }            get            {                if (_countClasses != null)                    return _countClasses;                                throw new NullReferenceException();            }        }                public string? CountTeachers        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _countTeachers, value);                }            }            get            {                if (_countTeachers != null)                    return _countTeachers;                                throw new NullReferenceException();            }        }                public string? UrlPathSegment { get; }        public IScreen HostScreen { get; }    }}