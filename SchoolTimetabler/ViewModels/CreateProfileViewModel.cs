using System;using System.Collections.Generic;using System.Reactive;using Data.FakeDataBase;using ReactiveUI;using SchoolTimetabler.Models;namespace SchoolTimetabler.ViewModels{    public class CreateSchoolProfileViewModel : ViewModelBase, IRoutableViewModel, IScreen    {        private string? _schoolNumber;        private string? _countClasses;        private string? _countTeachers;        private string? _fullNameDirector;        private string? _fullName;        private string? _post;        private FakeDataBaseSchoolInfo _storage;                public ReactiveCommand<Unit, IRoutableViewModel> GoToClassEditingMenu { get; }        public ReactiveCommand<Unit, IRoutableViewModel> GoToDisciplineEditingMenu { get; }        public ReactiveCommand<Unit, IRoutableViewModel> GoToTeacherEditingMenu { get; }        public ReactiveCommand<Unit, IRoutableViewModel> GoToСabinetEditingMenu { get; }        public RoutingState Router { get; } = new RoutingState();                public CreateSchoolProfileViewModel(IScreen hostScreen,            FakeDataBaseSchoolInfo storage, FDataBaseClasses storageClasses, FDataBaseDisciplines storageDisciplines,            FDataBaseTeachers storageTeachers, List<string> DisciplinesName)        {            HostScreen = hostScreen;            _storage = storage;                        GoToСabinetEditingMenu = ReactiveCommand.CreateFromObservable(                () => Router.Navigate.Execute(                    new CabinetEditingMenuViewModel())            );            GoToDisciplineEditingMenu = ReactiveCommand.CreateFromObservable(                () => Router.Navigate.Execute(                    new DisciplineEditingMenuViewModel(this, storageDisciplines))            );            GoToClassEditingMenu = ReactiveCommand.CreateFromObservable(                () => Router.Navigate.Execute(                    new ClassEditingMenuViewModel(this, storageClasses))            );            GoToTeacherEditingMenu = ReactiveCommand.CreateFromObservable(                () => Router.Navigate.Execute(                    new TeacherEditingMenuViewModel(this, storageTeachers, storageDisciplines))            );        }        public void ConfirmSchoolSettings()        {            if (_schoolNumber == null  || _fullNameDirector == null || _countClasses == null ||                _countTeachers == null)            {                var message = MessageBox.Avalonia.MessageBoxManager.                    GetMessageBoxStandardWindow("Неправильные данные",                    "Вы заполнили не все поля в информации о школе");                message.Show();                                return;            }            var SchoolInfo = new Data.Models.School(_schoolNumber, _fullNameDirector, _countClasses, _countTeachers);            _storage.AddInfo(SchoolInfo);        }        public void ConfirmUserSettings()        {            if (_post == "" || _fullName == "")            {                var message = MessageBox.Avalonia.MessageBoxManager.                    GetMessageBoxStandardWindow("Неправильные данные",                        "Вы заполнили не все поля в информации о пользователе");                message.Show();                                return;            }            var confirm = new User(_fullName, _post);        }        public string? FullName        {            set => this.RaiseAndSetIfChanged(ref _fullName, value);            get => _fullName;        }        public string? Post        {            set => this.RaiseAndSetIfChanged(ref _post, value);            get => _post;        }        public string? SchoolNumber        {            set => this.RaiseAndSetIfChanged(ref _schoolNumber, value);            get => _schoolNumber;        }        public string? FullNameDirector        {            set => this.RaiseAndSetIfChanged(ref _fullNameDirector, value);            get => _fullNameDirector;        }        public string? CountClasses        {            set => this.RaiseAndSetIfChanged(ref _countClasses, value);            get => _countClasses;        }        public string? CountTeachers        {            set => this.RaiseAndSetIfChanged(ref _countTeachers, value);            get => _countTeachers;        }        public string? UrlPathSegment { get; }        public IScreen HostScreen { get; }    }}