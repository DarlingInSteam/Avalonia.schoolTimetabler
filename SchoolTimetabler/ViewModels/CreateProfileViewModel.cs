using System.Collections.Generic;using System.Reactive;using Data.FakeDataBase;using Data.Models;using MessageBox.Avalonia;using ReactiveUI;namespace SchoolTimetabler.ViewModels;public class CreateSchoolProfileViewModel : ViewModelBase, IRoutableViewModel, IScreen{    private string _borderFullName = "White";    private string _countClasses;    private string _countTeachers;    private string _fullName;    private string _fullNameDirector;    private string _post;    private string _schoolNumber;    private readonly FakeDataBaseSchoolInfo _storage;    private readonly FDataBaseUser _storageUser;    public CreateSchoolProfileViewModel(        FakeDataBaseSchoolInfo storage, FDataBaseClasses storageClasses, FDataBaseDisciplines storageDisciplines,        FDataBaseTeachers storageTeachers, List<string> DisciplinesName)    {        _storage = storage;        _storageUser = FDataBaseUser.GetInstance();        ConfirmSchoolSettings = ReactiveCommand.Create(() =>        {            if (_schoolNumber != null && _fullNameDirector != null && _countClasses != null &&                _countTeachers != null)                if (_schoolNumber.Length != 0 && _fullNameDirector.Length != 0 && _countClasses.Length != 0 &&                    _countTeachers.Length != 0)                {                    var SchoolInfo = new School(_schoolNumber, _fullNameDirector, _countClasses,                        _countTeachers);                    _storage.AddInfo(SchoolInfo);                    return;                }            var l = MessageBoxManager                .GetMessageBoxStandardWindow("Неправильные данные",                    "Вы не заполинили одно или несколько полей в информации о школе.").Show();        });        ConfirmUserSettings = ReactiveCommand.Create(() =>        {            if ((_fullName != null) & (_post != null))                if (Post.Length != 0 && FullName.Length != 0)                {                    var schoolUser = new SchoolUser(_post, _fullName);                    _storageUser.AddUser(schoolUser);                    return;                }            var l = MessageBoxManager                .GetMessageBoxStandardWindow("Неправильные данные",                    "Вы не заполинили одно или несколько полей в информации о пользователе.").Show();        });        GoToСabinetEditingMenu = ReactiveCommand.CreateFromObservable(            () => Router.Navigate.Execute(                new CabinetEditingMenuViewModel())        );        GoToDisciplineEditingMenu = ReactiveCommand.CreateFromObservable(            () => Router.Navigate.Execute(                new DisciplineEditingMenuViewModel(this, storageDisciplines))        );        GoToClassEditingMenu = ReactiveCommand.CreateFromObservable(            () => Router.Navigate.Execute(                new ClassEditingMenuViewModel(this, storageClasses))        );        GoToTeacherEditingMenu = ReactiveCommand.CreateFromObservable(            () => Router.Navigate.Execute(                new TeacherEditingMenuViewModel(this, storageTeachers, storageDisciplines))        );    }    public ReactiveCommand<Unit, IRoutableViewModel> GoToClassEditingMenu { get; }    public ReactiveCommand<Unit, IRoutableViewModel> GoToDisciplineEditingMenu { get; }    public ReactiveCommand<Unit, IRoutableViewModel> GoToTeacherEditingMenu { get; }    public ReactiveCommand<Unit, IRoutableViewModel> GoToСabinetEditingMenu { get; }    public ReactiveCommand<Unit, Unit> ConfirmUserSettings { get; }    public ReactiveCommand<Unit, Unit> ConfirmSchoolSettings { get; }    public string FullName    {        set => this.RaiseAndSetIfChanged(ref _fullName, value);        get => _fullName;    }    public string BorderFullName    {        set => this.RaiseAndSetIfChanged(ref _borderFullName, value);        get => _borderFullName;    }    public string Post    {        set => this.RaiseAndSetIfChanged(ref _post, value);        get => _post;    }    public string SchoolNumber    {        set => this.RaiseAndSetIfChanged(ref _schoolNumber, value);        get => _schoolNumber;    }    public string FullNameDirector    {        set => this.RaiseAndSetIfChanged(ref _fullNameDirector, value);        get => _fullNameDirector;    }    public string CountClasses    {        set => this.RaiseAndSetIfChanged(ref _countClasses, value);        get => _countClasses;    }    public string CountTeachers    {        set => this.RaiseAndSetIfChanged(ref _countTeachers, value);        get => _countTeachers;    }    public string? UrlPathSegment { get; }    public IScreen HostScreen { get; }    public RoutingState Router { get; } = new();}