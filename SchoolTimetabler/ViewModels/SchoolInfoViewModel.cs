using System;using System.Collections.Generic;using System.Collections.ObjectModel;using System.ComponentModel;using System.Reactive;using System.Reactive.Linq;using System.Reactive.Subjects;using System.Runtime.CompilerServices;using System.Threading.Tasks;using Avalonia.Collections;using Avalonia.Controls;using Avalonia.Input;using Avalonia.Interactivity;using Data.FakeDataBase;using Data.Models;using ReactiveUI;namespace SchoolTimetabler.ViewModels;public class SchoolInfoViewModel : ViewModelBase, IRoutableViewModel, IScreen{    private string? _schoolNumber;    private string? _fullNameDirector;    private string? _countClasses;    private string? _countTeacher;    private int _selectedIndexComboBox;    private int _selectedIndexComboBoxTeachers;    private bool _isVisiBleClsses = false;    private bool _isVisiBleDiscipline = false;    private bool _isVisiBleTeachers = false;    private bool _isVisibleDataGridTeachers = false;    private bool _isVisibleCabinets = false;    private FakeDataBaseSchoolInfo _storage;    private FDataBaseClasses _storageClasses;    private FDataBaseDisciplines _storageDisciplines;    private FDataBaseTeachers _storageTeachers;    private FDataBaseCabinets _storageCabinets;    private AvaloniaList<string> _disciplinesName;        public ObservableCollection<Data.Models.SchoolClass> Classes { get; }    public ObservableCollection<Data.Models.SchoolCabinet> Cabinets { get; }    public ObservableCollection<Data.Models.SchoolDiscipline> Disciplines { get; }    public ObservableCollection<Data.Models.SchoolTeachers> Teachers { get; }    public ObservableCollection<string> TeachersName { get; set; }    public SchoolInfoViewModel(MainWindowViewModel mainWindowViewModel,        FakeDataBaseSchoolInfo storage, FDataBaseClasses storageClasses, FDataBaseDisciplines storageDisciplines,        FDataBaseTeachers storageTeachers)    {        _storage = FakeDataBaseSchoolInfo.GetInstance();        _storageClasses = FDataBaseClasses.GetInstance();        _storageDisciplines = FDataBaseDisciplines.GetInstance();        _storageTeachers = FDataBaseTeachers.GetInstance();        _storageCabinets = FDataBaseCabinets.GetInstance();        TeachersName = new ObservableCollection<string>();        Teachers = new ObservableCollection<Data.Models.SchoolTeachers>(_storageTeachers.SchoolTeachers);        Classes = new ObservableCollection<Data.Models.SchoolClass>(_storageClasses.SchoolClasses);        Disciplines = new ObservableCollection<Data.Models.SchoolDiscipline>(_storageDisciplines.SchoolDisciplines);        _disciplinesName = new AvaloniaList<string>();        Cabinets = new ObservableCollection<Data.Models.SchoolCabinet>(_storageCabinets.SchoolCabinets);                        _schoolNumber = _storage.SchoolInfo.SchoolNumber;        _fullNameDirector = _storage.SchoolInfo.FullNameDirector;        _countClasses = _storage.SchoolInfo.CountClasses;        _countTeacher = _storage.SchoolInfo.CountTeachers;    }    private void OutputTeacher()    {        DisciplinesName.Clear();        var buf = new ObservableCollection<string>();        buf = _storageTeachers.GetTeacherDiscipline(_selectedIndexComboBoxTeachers);        foreach (var t in buf)        {            DisciplinesName.Add(t);        }        IsVisibleDataGridTeachers = true;    }    public void OutputTeachers()    {        TeachersName.Clear();        foreach (var t in Teachers)        {            TeachersName.Add(t.TeacherFullName);        }        IsVisibleTeachers = true;        IsVisibleDiscipline = false;        IsVisibleClasses = false;        IsVisibleCabinets = false;    }    public void OutputCabinets()    {        IsVisibleDiscipline = false;        IsVisibleDataGridTeachers = false;        IsVisibleTeachers = false;        IsVisibleClasses = false;        IsVisibleCabinets = false;        IsVisibleCabinets = true;    }        public void OutputClasses()    {        IsVisibleDiscipline = false;        IsVisibleDataGridTeachers = false;        IsVisibleTeachers = false;        IsVisibleCabinets = false;        IsVisibleClasses = true;    }    public void OutputDisciplines()    {        IsVisibleClasses = false;        IsVisibleDataGridTeachers = false;        IsVisibleTeachers = false;        IsVisibleCabinets = false;        IsVisibleDiscipline = true;    }    public AvaloniaList<string> DisciplinesName    {        get => _disciplinesName;        set => this.RaiseAndSetIfChanged(ref _disciplinesName, value);    }    public bool IsVisibleCabinets    {        set => this.RaiseAndSetIfChanged(ref _isVisibleCabinets, value);        get => _isVisibleCabinets;    }        public bool IsVisibleClasses    {        set => this.RaiseAndSetIfChanged(ref _isVisiBleClsses, value);        get => _isVisiBleClsses;    }    public bool IsVisibleDataGridTeachers    {        set => this.RaiseAndSetIfChanged(ref _isVisibleDataGridTeachers, value);        get => _isVisibleDataGridTeachers;    }    public bool IsVisibleDiscipline    {        set => this.RaiseAndSetIfChanged(ref _isVisiBleDiscipline, value);        get => _isVisiBleDiscipline;    }    public int SelectedIndexComboBoxTeachers    {        set        {            this.RaiseAndSetIfChanged(ref _selectedIndexComboBoxTeachers, value);            IsVisibleDataGridTeachers = false;            OutputTeacher();        }        get => _selectedIndexComboBoxTeachers;    }    public bool IsVisibleTeachers    {        set => this.RaiseAndSetIfChanged(ref _isVisiBleTeachers, value);        get => _isVisiBleTeachers;    }    public string? SchoolNumber    {        get => _schoolNumber;        set => this.RaiseAndSetIfChanged(ref _schoolNumber, value);    }    public string? FullNameDirector    {        get => _fullNameDirector;        set => this.RaiseAndSetIfChanged(ref _fullNameDirector, value);    }    public string? CountClasses    {        get => _countClasses;        set => this.RaiseAndSetIfChanged(ref _countClasses, value);    }    public string? CountTeacher    {        get => _countTeacher;        set => this.RaiseAndSetIfChanged(ref _countTeacher, value);    }    public string? UrlPathSegment { get; }    public IScreen HostScreen { get; }    public RoutingState Router { get; }}