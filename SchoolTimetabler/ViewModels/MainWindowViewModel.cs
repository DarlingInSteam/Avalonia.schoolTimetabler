using System.Reactive;using System.Reactive.Linq;using Data.Repositories;using Domain.UseCases;using ReactiveUI;using ReactiveUI.Fody.Helpers;namespace SchoolTimetabler.ViewModels;public class MainWindowViewModel : ViewModelBase, IScreen, IRoutableViewModel{    [Reactive] public bool IsVisibleWelcomeText { get; set; } = true;    [Reactive] public bool IsHavePassword { get; set; } = false;    [Reactive] public bool IsVisiblePasswordView { get; set; } = false;    [Reactive] public string InputPassword { get; set; }    private UserInteractor userInteractor;    private PasswordInteractor passwordInteractor;    public MainWindowViewModel()    {        userInteractor = new UserInteractor(UserRepository.GetInstance());        passwordInteractor = new PasswordInteractor(UserRepository.GetInstance());        ShowDialog = new Interaction<SetPasswordViewModel, string?>();        CreatePassword = ReactiveCommand.CreateFromTask(async () =>        {            var password = new SetPasswordViewModel();            var result = await ShowDialog.Handle(password);            if (string.IsNullOrWhiteSpace(result))            {                var message = MessageBox.Avalonia.MessageBoxManager                    .GetMessageBoxStandardWindow("Пароль", "Пароль не задан.").Show();            }            else            {                passwordInteractor.EncryptPlainTextToCipherText(result);                IsHavePassword = true;            }        });        if (string.IsNullOrWhiteSpace(userInteractor.UserGet().Password) == false)        {            WhenInputPassword();        }        LockWorkPlace = ReactiveCommand.CreateFromObservable(            () =>            {                WhenInputPassword();                return Router.Navigate.Execute(                    new LockWorkPlaceViewModel(this));            });        GoTimetableInfo = ReactiveCommand.CreateFromObservable(            () => Router.Navigate.Execute(new TimetableInfoViewModel())        );        GoCreateTimetable = ReactiveCommand.CreateFromObservable(            () => Router.Navigate.Execute(new CreateTimetableViewModel(this))        );        GoSchoolInfo = ReactiveCommand.CreateFromObservable(            () => Router.Navigate.Execute(new SchoolInfoViewModel(this))        );        GoCreateProfile = ReactiveCommand.CreateFromObservable(            () => Router.Navigate.Execute(new CreateSchoolProfileViewModel())        );        GoHelpInformation = ReactiveCommand.CreateFromObservable(            () => Router.Navigate.Execute(new HelpInformationViewModel())        );    }    private void WhenInputPassword()    {        IsVisibleWelcomeText = false;        IsHavePassword = false;        IsVisiblePasswordView = true;    }    public void PasswordConfirm()    {        if (passwordInteractor.CheckEqualPassword(InputPassword))        {            IsVisibleWelcomeText = true;            IsVisiblePasswordView = false;            IsHavePassword = true;        }        else        {            var msg = MessageBox.Avalonia.MessageBoxManager                .GetMessageBoxStandardWindow("Пароль", "Вы ввели неверный пароль").Show();        }    }    public void LockWorkPasswordTrue()    {        IsVisibleWelcomeText = true;        IsVisiblePasswordView = false;        IsHavePassword = true;    }    public ReactiveCommand<Unit, IRoutableViewModel> LockWorkPlace { get; }    public Interaction<SetPasswordViewModel, string?> ShowDialog { get; }    public ReactiveCommand<Unit, IRoutableViewModel> GoCreateProfile { get; }    public ReactiveCommand<Unit, IRoutableViewModel> GoCreateTimetable { get; }    public ReactiveCommand<Unit, IRoutableViewModel> GoTimetableInfo { get; }    public ReactiveCommand<Unit, IRoutableViewModel> GoSchoolInfo { get; }    public ReactiveCommand<Unit, IRoutableViewModel> GoHelpInformation { get; }    public ReactiveCommand<Unit, Unit> CreatePassword { get; }    public RoutingState Router { get; } = new();    public string? UrlPathSegment { get; }    public IScreen HostScreen { get; }}