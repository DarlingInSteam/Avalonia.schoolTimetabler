using System.Collections.ObjectModel;using System.Reactive;using Data.FakeDataBase;using Data.Models;using Data.Repository;using Domain.Entities;using Domain.UseCases;using ReactiveUI;namespace SchoolTimetabler.ViewModels;public class TimetableInfoViewModel : ViewModelBase, IRoutableViewModel, IScreen{    private int _countDays;    private string _dayOfTheWeek = "Понедельник";    private bool _isEnableBack;    private bool _isEnableNext = true;    private bool _isVisibleBorder = true;    private int _selectedIndexComboBox;    private readonly ClassInteractor _classInteractor;    private readonly FDataBaseTimetable _storageTimetable;    public TimetableInfoViewModel()    {        _storageTimetable = FDataBaseTimetable.GetInstance();        _classInteractor = new ClassInteractor(ClassesRepository.GetInstance());        Timetable = new ObservableCollection<SchoolTimetable>(_storageTimetable.SchoolTimetables);        ClassesNumber = new ObservableCollection<string>();        Classes = new ObservableCollection<Class>(_classInteractor.GetClasses());        ClassesNumbers = new ObservableCollection<string>();        TeacherName = new ObservableCollection<string>();        DisciplineName = new ObservableCollection<string>();        CabinetNumber = new ObservableCollection<string>();        foreach (var t in Classes) ClassesNumber.Add(t.Number + t.Symbol);        foreach (var t in _storageTimetable.SchoolTimetables)            if (t.ClassOne == ClassesNumber[SelectedIndexComboBox] && t.Day == DayOfTheWeek)            {                foreach (var q in _storageTimetable.GetDisciplines(_dayOfTheWeek, ClassesNumber[SelectedIndexComboBox]))                    DisciplineName.Add(q);                foreach (var w in _storageTimetable.GetTeacher(_dayOfTheWeek, ClassesNumber[SelectedIndexComboBox]))                    TeacherName.Add(w);                foreach (var e in _storageTimetable.GetClass(_dayOfTheWeek, ClassesNumber[SelectedIndexComboBox]))                    ClassesNumbers.Add(e);                foreach (var y in _storageTimetable.GetCabinet(_dayOfTheWeek, ClassesNumber[SelectedIndexComboBox]))                    CabinetNumber.Add(y);                break;            }        BackDay = ReactiveCommand.Create(() =>        {            _countDays -= 1;            ChangeDayOfTheWeek();            RefreshListBox();        });        NextDay = ReactiveCommand.Create(() =>        {            _countDays += 1;            ChangeDayOfTheWeek();            RefreshListBox();        });    }    public ObservableCollection<Class> Classes { get; }    public ObservableCollection<string> ClassesNumber { get; set; }    public ObservableCollection<string> TeacherName { get; set; }    public ObservableCollection<string> DisciplineName { get; set; }    public ObservableCollection<string> CabinetNumber { get; set; }    public ObservableCollection<string> ClassesNumbers { get; set; }    public ObservableCollection<SchoolTimetable> Timetable { get; set; }    public ReactiveCommand<Unit, Unit> NextDay { get; }    public ReactiveCommand<Unit, Unit> BackDay { get; }    public int SelectedIndexComboBox    {        set        {            this.RaiseAndSetIfChanged(ref _selectedIndexComboBox, value);            RefreshListBox();        }        get => _selectedIndexComboBox;    }    public bool IsVisibleBorder    {        set => this.RaiseAndSetIfChanged(ref _isVisibleBorder, value);        get => _isVisibleBorder;    }    public string DayOfTheWeek    {        set => this.RaiseAndSetIfChanged(ref _dayOfTheWeek, value);        get => _dayOfTheWeek;    }    public bool IsEnableNext    {        set => this.RaiseAndSetIfChanged(ref _isEnableNext, value);        get => _isEnableNext;    }    public bool IsEnableBack    {        set => this.RaiseAndSetIfChanged(ref _isEnableBack, value);        get => _isEnableBack;    }    public string? UrlPathSegment { get; }    public IScreen HostScreen { get; }    public RoutingState Router { get; }    private void RefreshListBox()    {        DisciplineName.Clear();        TeacherName.Clear();        ClassesNumbers.Clear();        CabinetNumber.Clear();        foreach (var t in _storageTimetable.SchoolTimetables)            if (t.ClassOne == ClassesNumber[SelectedIndexComboBox] && t.Day == DayOfTheWeek)            {                foreach (var q in _storageTimetable.GetDisciplines(_dayOfTheWeek, ClassesNumber[SelectedIndexComboBox]))                    DisciplineName.Add(q);                foreach (var w in _storageTimetable.GetTeacher(_dayOfTheWeek, ClassesNumber[SelectedIndexComboBox]))                    TeacherName.Add(w);                foreach (var e in _storageTimetable.GetClass(_dayOfTheWeek, ClassesNumber[SelectedIndexComboBox]))                    ClassesNumbers.Add(e);                foreach (var y in _storageTimetable.GetCabinet(_dayOfTheWeek, ClassesNumber[SelectedIndexComboBox]))                    CabinetNumber.Add(y);            }    }    private void ChangeDayOfTheWeek()    {        switch (_countDays)        {            case 0:            {                DayOfTheWeek = "Понедельник";                IsEnableBack = false;                break;            }            case 1:            {                DayOfTheWeek = "Вторник";                IsEnableBack = true;                break;            }            case 2:            {                DayOfTheWeek = "Среда";                break;            }            case 3:            {                DayOfTheWeek = "Четверг";                break;            }            case 4:            {                DayOfTheWeek = "Пятница";                IsEnableNext = true;                break;            }            case 5:            {                DayOfTheWeek = "Суббота";                IsEnableNext = false;                break;            }        }    }}