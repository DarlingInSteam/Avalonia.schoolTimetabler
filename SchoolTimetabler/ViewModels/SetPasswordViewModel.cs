using System.Reactive;using System.Reactive.Linq;using Data.Repositories;using Domain.UseCases;using MessageBox.Avalonia;using ReactiveUI;using ReactiveUI.Fody.Helpers;namespace SchoolTimetabler.ViewModels;public class SetPasswordViewModel : ViewModelBase, IRoutableViewModel, IScreen{    private readonly PasswordInteractor passwordInteractor;    private readonly UserInteractor userInteractor;    public SetPasswordViewModel()    {        Close = new Interaction<string, Unit>();        userInteractor = new UserInteractor(UserRepository.GetInstance());        passwordInteractor = new PasswordInteractor(UserRepository.GetInstance());        if (string.IsNullOrWhiteSpace(userInteractor.UserGet().Password) == false)        {            IsVisibleInputPassword = true;            IsVisibleSetPassword = false;        }        else        {            IsVisibleInputPassword = false;            IsVisibleSetPassword = true;        }        Confirm = ReactiveCommand.CreateFromTask(async () =>        {            if (Password == PasswordTwo)            {                var msg = MessageBoxManager                    .GetMessageBoxStandardWindow("Пароль", "Вы успешно задали пароль!").Show();                await Close.Handle(Password);            }            else if (string.IsNullOrWhiteSpace(PasswordTwo) && string.IsNullOrWhiteSpace(Password))            {                await Close.Handle(Password);            }            else            {                var msg = MessageBoxManager                    .GetMessageBoxStandardWindow("Пароль", "Вы ввели разные пароли.").Show();            }        });        ConfirmEqualPassword = ReactiveCommand.Create(() =>        {            if (passwordInteractor.CheckEqualPassword(Password))            {                IsVisibleInputPassword = false;                IsVisibleSetPassword = true;                Password = "";            }            else            {                var msg = MessageBoxManager                    .GetMessageBoxStandardWindow("Пароль", "Неверный пароль").Show();            }        });    }    [Reactive] public string Password { get; set; }    [Reactive] public string PasswordTwo { get; set; }    [Reactive] public bool IsVisibleSetPassword { get; set; }    [Reactive] public bool IsVisibleInputPassword { get; set; }    public Interaction<string, Unit> Close { get; }    public ReactiveCommand<Unit, Unit> Confirm { get; }    public ReactiveCommand<Unit, Unit> ConfirmEqualPassword { get; }    public string? UrlPathSegment { get; }    public IScreen HostScreen { get; }    public RoutingState Router { get; }}