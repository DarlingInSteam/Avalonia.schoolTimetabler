using Domain.Entities;using Domain.Repositories;namespace Domain.UseCases;public class TimetableInteractor{    private readonly ITimetablesRepository<Timetable> _timetablesRepository;    public TimetableInteractor(ITimetablesRepository<Timetable> timetablesRepository)    {        _timetablesRepository = timetablesRepository;    }    public void AddTimetable(Timetable newEntity)    {        var msg = new List<string>();        foreach (var timetable in GetTimetable())        {            if (timetable.Day == newEntity.Day)            {                if (Detected(timetable.TeacherOne, newEntity.TeacherOne)) msg.Add(newEntity.TeacherOne);                if (Detected(timetable.TeacherTwo, newEntity.TeacherTwo)) msg.Add(newEntity.TeacherTwo);                if (Detected(timetable.TeacherThree, newEntity.TeacherThree)) msg.Add(newEntity.TeacherThree);                if (Detected(timetable.TeacherFour, newEntity.TeacherFour)) msg.Add(newEntity.TeacherFour);                if (Detected(timetable.TeacherFive, newEntity.TeacherFive)) msg.Add(newEntity.TeacherFive);                if (Detected(timetable.TeacherSix, newEntity.TeacherSix)) msg.Add(newEntity.TeacherSix);            }            if (timetable.Day == newEntity.Day)            {                if (Detected(timetable.CabinetOne, newEntity.CabinetOne)) msg.Add(newEntity.CabinetOne);                if (Detected(timetable.CabinetTwo, newEntity.CabinetTwo)) msg.Add(newEntity.CabinetTwo);                if (Detected(timetable.CabinetThree, newEntity.CabinetThree)) msg.Add(newEntity.CabinetThree);                if (Detected(timetable.CabinetFour, newEntity.CabinetFour)) msg.Add(newEntity.CabinetFour);                if (Detected(timetable.CabinetFive, newEntity.CabinetFive)) msg.Add(newEntity.CabinetFive);                if (Detected(timetable.CabinetSix, newEntity.CabinetSix)) msg.Add(newEntity.CabinetSix);            }        }        if (msg.Count != 0)        {            var message = MessageBox.Avalonia.MessageBoxManager                .GetMessageBoxStandardWindow("Неправильные данные",                    "Эти учителя уже заняты в этот день:\n" + string.Join(", ", msg)).Show();        }        else        {            _timetablesRepository.Add(newEntity);        }    }    public void DeleteTimetable(Timetable delTimetable)    {        if (string.IsNullOrWhiteSpace(delTimetable.Day))        {            var message = MessageBox.Avalonia.MessageBoxManager                .GetMessageBoxStandardWindow("Неправильные данные",                    "Вы пытаетесь удалить несуществующее расписание").Show();        }        else        {            _timetablesRepository.Delete(delTimetable);        }    }    public List<Timetable> GetTimetable()    {        var t = _timetablesRepository.Read();        return t;    }    public List<string> GetDisciplines(string day, string classNumber)    {        var t = _timetablesRepository.GetDisciplines(day, classNumber);        return t;    }    public List<string> GetTeachers(string day, string classNumber)    {        var t = _timetablesRepository.GetTeacher(day, classNumber);        return t;    }    public List<string> GetCabinets(string day, string classNumber)    {        var t = _timetablesRepository.GetCabinet(day, classNumber);        return t;    }    public List<string> GetClasses(string day, string classNumber)    {        var t = _timetablesRepository.GetClass(day, classNumber);        return t;    }    private bool Detected(string entityOne, string entityTwo)    {        return entityOne == entityTwo &&               string.IsNullOrWhiteSpace(entityOne) == false &&               string.IsNullOrWhiteSpace(entityTwo) == false;    }}