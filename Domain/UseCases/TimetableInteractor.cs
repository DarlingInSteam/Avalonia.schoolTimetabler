using Domain.Entities;using Domain.Repositories;namespace Domain.UseCases;public class TimetableInteractor{    private readonly ITimetablesRepository<Timetable> _timetablesRepository;    public TimetableInteractor(ITimetablesRepository<Timetable> timetablesRepository)    {        _timetablesRepository = timetablesRepository;    }    public void AddTimetable(Timetable newEntity)    {        var msg = new List<string>();        foreach (var timetable in GetTimetable())        {            if (timetable.Day == newEntity.Day)            {                if (timetable.TeacherOne == newEntity.TeacherOne && string.IsNullOrWhiteSpace(timetable.TeacherOne) == false &&                     string.IsNullOrWhiteSpace(newEntity.TeacherOne) == false) msg.Add(newEntity.TeacherOne);                if (timetable.TeacherTwo == newEntity.TeacherTwo && string.IsNullOrWhiteSpace(timetable.TeacherTwo) == false &&                     string.IsNullOrWhiteSpace(newEntity.TeacherTwo) == false) msg.Add(newEntity.TeacherTwo);                if (timetable.TeacherThree == newEntity.TeacherThree && string.IsNullOrWhiteSpace(timetable.TeacherThree) == false &&                     string.IsNullOrWhiteSpace(newEntity.TeacherThree) == false) msg.Add(newEntity.TeacherThree);                if (timetable.TeacherFour == newEntity.TeacherFour && string.IsNullOrWhiteSpace(timetable.TeacherFour) == false &&                     string.IsNullOrWhiteSpace(newEntity.TeacherFour) == false) msg.Add(newEntity.TeacherFour);                if (timetable.TeacherFive == newEntity.TeacherFive && string.IsNullOrWhiteSpace(timetable.TeacherFive) == false &&                     string.IsNullOrWhiteSpace(newEntity.TeacherFive) == false) msg.Add(newEntity.TeacherFive);                if (timetable.TeacherSix == newEntity.TeacherSix && string.IsNullOrWhiteSpace(timetable.TeacherSix) == false &&                     string.IsNullOrWhiteSpace(newEntity.TeacherSix) == false) msg.Add(newEntity.TeacherSix);            }            if (timetable.Day == newEntity.Day)            {                if (timetable.CabinetOne == newEntity.CabinetOne && string.IsNullOrWhiteSpace(timetable.CabinetOne) == false &&                     string.IsNullOrWhiteSpace(newEntity.CabinetOne) == false) msg.Add(newEntity.CabinetOne);                if (timetable.TeacherTwo == newEntity.CabinetOne && string.IsNullOrWhiteSpace(timetable.CabinetOne) == false &&                     string.IsNullOrWhiteSpace(newEntity.CabinetOne) == false) msg.Add(newEntity.CabinetOne);                if (timetable.TeacherThree == newEntity.CabinetOne && string.IsNullOrWhiteSpace(timetable.CabinetOne) == false &&                     string.IsNullOrWhiteSpace(newEntity.CabinetOne) == false) msg.Add(newEntity.CabinetOne);                if (timetable.TeacherFour == newEntity.CabinetOne && string.IsNullOrWhiteSpace(timetable.CabinetOne) == false &&                     string.IsNullOrWhiteSpace(newEntity.CabinetOne) == false) msg.Add(newEntity.CabinetOne);                if (timetable.TeacherFive == newEntity.CabinetOne && string.IsNullOrWhiteSpace(timetable.CabinetOne) == false &&                     string.IsNullOrWhiteSpace(newEntity.CabinetOne) == false) msg.Add(newEntity.CabinetOne);                if (timetable.TeacherSix == newEntity.CabinetOne && string.IsNullOrWhiteSpace(timetable.CabinetOne) == false &&                     string.IsNullOrWhiteSpace(newEntity.CabinetOne) == false) msg.Add(newEntity.CabinetOne);            }        }        if (msg.Count != 0)        {            var message = MessageBox.Avalonia.MessageBoxManager                .GetMessageBoxStandardWindow("Неправильные данные",                    "Эти учителя уже заняты в этот день:\n" + string.Join(", ", msg)).Show();        }        else        {            _timetablesRepository.Add(newEntity);        }    }    public void DeleteTimetable(Timetable delTimetable)    {        _timetablesRepository.Delete(delTimetable);    }    public List<Timetable> GetTimetable()    {        var t = _timetablesRepository.Read();        return t;    }    public List<string> GetDisciplines(string day, string classNumber)    {        var t = _timetablesRepository.GetDisciplines(day, classNumber);        return t;    }        public List<string> GetTeachers(string day, string classNumber)    {        var t = _timetablesRepository.GetTeacher(day, classNumber);        return t;    }        public List<string> GetCabinets(string day, string classNumber)    {        var t = _timetablesRepository.GetCabinet(day, classNumber);        return t;    }        public List<string> GetClasses(string day, string classNumber)    {        var t = _timetablesRepository.GetClass(day, classNumber);        return t;    }}