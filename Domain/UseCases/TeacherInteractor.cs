using Domain.Entities;using Domain.Repositories;using MessageBox.Avalonia;namespace Domain.UseCases;public class TeacherInteractor{    private readonly ITeachersRepository<Teacher> _teachersRepository;    public TeacherInteractor(ITeachersRepository<Teacher> teachersRepository)    {        _teachersRepository = teachersRepository;    }    public void DeleteTeacher(Teacher delTeacher)    {        _teachersRepository.Delete(delTeacher);    }    public void AddTeacher(string teacherName)    {        var counterEqualTeachers = 0;        foreach (var Teacher in _teachersRepository.Read())        {            var name = Teacher.TeacherFullName;            var start = 0;            var finish = 0;            for (var i = 0; i < name.Length; i++)            {                if (name[i] == '(') start = i;                if (start != 0 && i >= start) finish += 1;            }            if (finish != 0) name = name.Remove(start, finish);            if (name == teacherName) counterEqualTeachers += 1;        }        if (counterEqualTeachers != 0) teacherName = teacherName + '(' + counterEqualTeachers + ')';        if (string.IsNullOrWhiteSpace(teacherName))        {            var message = MessageBoxManager                .GetMessageBoxStandardWindow("Неправильные данные",                    "Вы не заполинили поле: ФИО учителя").Show();        }        else        {            var id = 0;            if (_teachersRepository.Read().Count == 0) id = 0;            else id = _teachersRepository.Read().Count;            var newTeacher = new Teacher(teacherName, id);            _teachersRepository.Add(newTeacher);        }    }    public List<Teacher> GetTeachers()    {        var t = _teachersRepository.Read();        return t;    }    public void DeleteDiscipline(int indexDiscipline, int indexTeacher)    {        var t = _teachersRepository.Read()[indexTeacher];        t.TeacherDisciplines.RemoveAt(indexDiscipline);        _teachersRepository.DelDiscipline(t, indexTeacher);    }    public List<string> GetTeacherDisciplines(int index)    {        var t = _teachersRepository.GetTeacherDiscipline(index);        return t;    }    public void AddDiscipline(List<string> str, int index)    {        var msg = new List<string>();        if (str.Count == 0)        {            var message = MessageBoxManager                .GetMessageBoxStandardWindow("Неправильные данные",                    "Вы не выбрали дисциплины для учителя").Show();        }        else if (str.Count != 0)        {            var t = _teachersRepository.GetTeacherDiscipline(index);            foreach (var strTeacher in t)            foreach (var strNew in str)                if (strTeacher == strNew)                    msg.Add(strNew);            if (msg.Count != 0)            {                var message = MessageBoxManager                    .GetMessageBoxStandardWindow("Неправильные данные",                        "Данные дисциплины уже присутствуют у учителя:\n" + string.Join(", ", msg)).Show();            }            else            {                var a = new Teacher(_teachersRepository.Read()[index].TeacherFullName,                    _teachersRepository.Read()[index].Id);                a.TeacherDisciplines = str;                _teachersRepository.AddDiscipline(a);                var message = MessageBoxManager                    .GetMessageBoxStandardWindow("Оповещение",                        "Дисциплины успешно добавлены преподавателю.").Show();            }        }    }}