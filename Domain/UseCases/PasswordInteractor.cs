using System.Security.Cryptography;using System.Text;using Domain.Entities;using Domain.Repositories;namespace Domain.UseCases;public class PasswordInteractor{    private readonly IUserRepository<User> _userRepository;    private static string _securityKey = "ComplexKeyHere_12121";    private static string _encPassword;    public PasswordInteractor(IUserRepository<User> userRepository)    {        _userRepository = userRepository;    }    public bool CheckEqualPassword(string inputPassword)    {        var CipherText = _userRepository.Read().Password;        byte[] toEncryptArray = Convert.FromBase64String(CipherText);        MD5CryptoServiceProvider objMD5CryptoService = new MD5CryptoServiceProvider();        byte[] securityKeyArray = objMD5CryptoService.ComputeHash(UTF8Encoding.UTF8.GetBytes(_securityKey));        objMD5CryptoService.Clear();        var objTripleDESCryptoService = new TripleDESCryptoServiceProvider();        objTripleDESCryptoService.Key = securityKeyArray;        objTripleDESCryptoService.Mode = CipherMode.ECB;        objTripleDESCryptoService.Padding = PaddingMode.PKCS7;        var objCrytpoTransform = objTripleDESCryptoService.CreateDecryptor();        byte[] resultArray = objCrytpoTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);        objTripleDESCryptoService.Clear();        return UTF8Encoding.UTF8.GetString(resultArray) == inputPassword;    }    public void EncryptPlainTextToCipherText(string PlainText)    {        byte[] toEncryptedArray = UTF8Encoding.UTF8.GetBytes(PlainText);        MD5CryptoServiceProvider objMD5CryptoService = new MD5CryptoServiceProvider();        byte[] securityKeyArray = objMD5CryptoService.ComputeHash(UTF8Encoding.UTF8.GetBytes(_securityKey));        objMD5CryptoService.Clear();        var objTripleDESCryptoService = new TripleDESCryptoServiceProvider();        objTripleDESCryptoService.Key = securityKeyArray;        objTripleDESCryptoService.Mode = CipherMode.ECB;        objTripleDESCryptoService.Padding = PaddingMode.PKCS7;        var objCrytpoTransform = objTripleDESCryptoService.CreateEncryptor();        byte[] resultArray = objCrytpoTransform.TransformFinalBlock(toEncryptedArray, 0, toEncryptedArray.Length);        objTripleDESCryptoService.Clear();        _encPassword = Convert.ToBase64String(resultArray, 0, resultArray.Length);        AddPasswordToUser();    }    private void AddPasswordToUser()    {        var t = _userRepository.Read();        t.Password = _encPassword;        t.KeyPassword = _securityKey;        _userRepository.Add(t);    }}