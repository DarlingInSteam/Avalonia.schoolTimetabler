using System;using ReactiveUI;using Avalonia.schoolTimetabler.Models;namespace Avalonia.schoolTimetabler.ViewModels{    public class CreateSchoolProfileViewModel : ViewModelBase, IRoutableViewModel    {        private string? _userName;        private string? _password;        private string? _schoolNumber;        private string? _fullName;        public CreateSchoolProfileViewModel(MainWindowViewModel mainWindowViewModel)        {                    }        public CreateSchoolProfileViewModel()        {                    }        public void ConfirmUserSettings()        {            Console.WriteLine("342423423");            if (_password == null || _userName == null) return;                        var confirm = new User(_password, _userName);            Console.WriteLine(confirm.UserName);        }        public string? FullName        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _fullName, value);                    Console.WriteLine(_fullName);                }            }            get            {                if (_fullName != null)                    return _fullName;                throw new NullReferenceException();            }        }                public string? SchoolNumber        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _schoolNumber, value);                }            }            get            {                if (_schoolNumber != null)                    return _schoolNumber;                                throw new NullReferenceException();            }        }                public string? Password        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _password, value);                    Console.WriteLine(_password);                }            }            get            {                if (_password != null)                    return _password;                                throw new NullReferenceException();            }        }                public string? UserName        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _userName, value);                    Console.WriteLine(_userName);                }            }            get            {                if (_userName != null)                    return _userName;                                throw new NullReferenceException();            }        }        public string? UrlPathSegment { get; }        public IScreen HostScreen { get; }    }}