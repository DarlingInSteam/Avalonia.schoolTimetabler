using System;using System.Collections.Generic;using System.Collections.ObjectModel;using ReactiveUI;using Avalonia.schoolTimetabler.Models;namespace Avalonia.schoolTimetabler.ViewModels{    public class CreateSchoolProfileViewModel : ViewModelBase, IRoutableViewModel    {        private string? _schoolNumber;        private string? _countClasses;        private string? _countTeachers;        private string? _fullNameDirector;        private string? _fullName;        private string? _post;        public ObservableCollection<SchoolClasses> Classes { get; }        public CreateSchoolProfileViewModel(MainWindowViewModel mainWindowViewModel)        {            Classes = new ObservableCollection<SchoolClasses>(GenerateMockClassesTable());        }        public CreateSchoolProfileViewModel()        {            Classes = new ObservableCollection<SchoolClasses>(GenerateMockClassesTable());        }        private IEnumerable<SchoolClasses> GenerateMockClassesTable()        {            var defaultClasses = new List<SchoolClasses>()            {                new SchoolClasses()                {                    Classroom = "1-1",                    Number = "3",                    Symbol = "В"                },                                new SchoolClasses()                {                    Classroom = "3-4",                    Number = "9",                    Symbol = "А"                },                                new SchoolClasses()                {                    Classroom = "2-6",                    Number = "5",                    Symbol = "Б"                }            };            return defaultClasses;        }                public void DemoItems()        {                        }                public void ConfirmSchoolSettings()        {            if (_schoolNumber == null || _fullNameDirector == null || _countClasses == null || _countTeachers == null) return;            var confirm = new School(_schoolNumber, _fullNameDirector, _countClasses, _countTeachers);        }                public void ConfirmUserSettings()        {            if (_post == null || _fullName == null) return;            var confirm = new User(_fullName, _post);        }        public string? FullName        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _fullName, value);                }            }            get            {                if (_fullName != null)                    return _fullName;                throw new NullReferenceException();            }        }                public string? Post        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _post, value);                }            }            get            {                if (_post != null)                    return _post;                throw new NullReferenceException();            }        }                public string? SchoolNumber        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _schoolNumber, value);                }            }            get            {                if (_schoolNumber != null)                    return _schoolNumber;                                throw new NullReferenceException();            }        }        public string? FullNameDirector        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _fullNameDirector, value);                }            }            get            {                if (_fullNameDirector != null)                    return _fullNameDirector;                                throw new NullReferenceException();            }        }                public string? CountClasses        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _countClasses, value);                }            }            get            {                if (_countClasses != null)                    return _countClasses;                                throw new NullReferenceException();            }        }                public string? CountTeachers        {            set            {                if (value != null && !string.Equals(value, ""))                {                    this.RaiseAndSetIfChanged(ref _countTeachers, value);                }            }            get            {                if (_countTeachers != null)                    return _countTeachers;                                throw new NullReferenceException();            }        }                public string? UrlPathSegment { get; }        public IScreen HostScreen { get; }    }}