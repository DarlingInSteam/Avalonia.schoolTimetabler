using System.Reactive.Linq;using System.Reactive.Subjects;using System.Text.Json;using Domain.Entities;using Domain.Repositories;namespace Data.Repositories;public class CabinetsRepository : ICabinetsRepository<Cabinet>{    protected IObservable<IEnumerable<Cabinet>> Cabinets;    private readonly BehaviorSubject<List<Cabinet>> _cabinets;    private string _path = "/home/darling/RiderProjects/Avalonia.schoolTimetabler/Data/DataSets/Cabinets.json";    private Stream? _fs;        private static CabinetsRepository? _globalRepositoryInstance;    protected CabinetsRepository()    {        _cabinets = new BehaviorSubject<List<Cabinet>>(new List<Cabinet>());        Cabinets = _cabinets.AsObservable();    }        public static CabinetsRepository GetInstance()    {        return _globalRepositoryInstance ??= new CabinetsRepository();    }    public void Delete(Cabinet delCabinet)    {        _cabinets.Value.Remove(delCabinet);        Cabinets = _cabinets;        Serialization(_cabinets.Value);    }    public void Add(Cabinet newCabinet)    {        _cabinets.Value.Add(newCabinet);        Cabinets = _cabinets;        Serialization(_cabinets.Value);    }    private void Serialization(List<Cabinet>? entities)    {        if (entities is null) return;        _fs = GetStream();        JsonSerializer.SerializeAsync(_fs, entities, _options);        _fs.Close();    }    protected List<Cabinet> DeserializationJson()    {        List<Cabinet>? deserialized = null;        try        {            _fs = GetStream();            deserialized = JsonSerializer.Deserialize<List<Cabinet>>(_fs, _options);        }        catch (Exception)        {        }        finally        {            _fs?.Close();            deserialized ??= new List<Cabinet>();        }        return deserialized;    }    private readonly JsonSerializerOptions _options = new ()    {        WriteIndented = true,    };    public List<Cabinet> Read()    {        return DeserializationJson();    }        private Stream GetStream()=> new FileStream    (        _path,        FileMode.OpenOrCreate,        FileAccess.ReadWrite,        FileShare.ReadWrite,        4096,        FileOptions.None    );}