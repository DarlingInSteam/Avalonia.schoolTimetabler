using System.Reactive.Linq;using System.Reactive.Subjects;using Domain.Entities;using Domain.Repositories;namespace Data.Repositories;public class CabinetsRepository : ICabinetsRepository<Cabinet>{    protected IObservable<IEnumerable<Cabinet>> Cabinets;    private readonly BehaviorSubject<List<Cabinet>> _cabinets;        private static CabinetsRepository? _globalRepositoryInstance;    protected CabinetsRepository()    {        _cabinets = new BehaviorSubject<List<Cabinet>>(new List<Cabinet>());        Cabinets = _cabinets.AsObservable();    }        public static CabinetsRepository GetInstance()    {        return _globalRepositoryInstance ??= new CabinetsRepository();    }    public void Delete(Cabinet delCabinet)    {        _cabinets.Value.Remove(delCabinet);        Cabinets = _cabinets;    }    public void Add(Cabinet newCabinet)    {        _cabinets.Value.Add(newCabinet);        Cabinets = _cabinets;    }    public List<Cabinet> Read()    {        var cabinets = new List<Cabinet>(_cabinets.Value);        return cabinets;    }}