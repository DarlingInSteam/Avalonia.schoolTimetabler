using System.Reactive.Linq;using System.Reactive.Subjects;using Domain.Entities;using Domain.Repositories;namespace Data.Repositories;public class DisciplineRepository : IDisciplinesRepository<Discipline>{    protected IObservable<IEnumerable<Discipline>> Disciplines;    private readonly BehaviorSubject<List<Discipline>> _disciplines;        private static DisciplineRepository? _globalRepositoryInstance;    protected DisciplineRepository()    {        _disciplines = new BehaviorSubject<List<Discipline>>(new List<Discipline>());        Disciplines = _disciplines.AsObservable();    }        public static DisciplineRepository GetInstance()    {        return _globalRepositoryInstance ??= new DisciplineRepository();    }    public void Delete(Discipline delDiscipline)    {        _disciplines.Value.Remove(delDiscipline);        Disciplines = _disciplines;    }    public void Add(Discipline newDiscipline)    {        _disciplines.Value.Add(newDiscipline);        Disciplines = _disciplines;    }    public List<Discipline> Read()    {        var disciplines = new List<Discipline>(_disciplines.Value);        return disciplines;    }}