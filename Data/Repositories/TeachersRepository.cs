using System.Reactive.Linq;using System.Reactive.Subjects;using Data.Repositories;using Domain.Entities;using Domain.Repositories;namespace Data.Repository;public class TeacherRepository : ITeachersRepository<Teacher>{    protected IObservable<IEnumerable<Teacher>> Teachers;    private readonly BehaviorSubject<List<Teacher>> _teachers;        private static TeacherRepository? _globalRepositoryInstance;    protected TeacherRepository()    {        _teachers = new BehaviorSubject<List<Teacher>>(new List<Teacher>());        Teachers = _teachers.AsObservable();    }        public static TeacherRepository GetInstance()    {        return _globalRepositoryInstance ??= new TeacherRepository();    }    public void Delete(Teacher delEntity)    {        _teachers.Value.Remove(delEntity);        Teachers = _teachers;    }    public void Add(Teacher newEntity)    {        _teachers.Value.Add(newEntity);        Teachers = _teachers;    }    public List<Teacher> Read()    {        var teachers = new List<Teacher>(_teachers.Value);        return teachers;    }    public void DelDiscipline(int indexDiscipline, int indexTeacher)    {        var t = _teachers.Value;        t[indexTeacher].TeacherDisciplines.Remove(t[indexTeacher].TeacherDisciplines[indexDiscipline]);        _teachers.OnNext(t);        Teachers = _teachers;    }    public List<string> GetTeacherDiscipline(int index)    {        var teacherDisciplines = _teachers.Value[index].TeacherDisciplines;        return teacherDisciplines;    }    public void AddDiscipline(List<string> str, int index)    {        foreach (var t in str)        {            _teachers.Value[index].TeacherDisciplines.Add(t);        }    }}