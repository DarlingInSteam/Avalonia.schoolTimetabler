using System.Reactive.Linq;using System.Reactive.Subjects;using Domain.Entities;using Domain.Repositories;namespace Data.Repositories;public class TeacherRepository : SerializationRepository<Teacher>, ITeachersRepository<Teacher>{    protected IObservable<IEnumerable<Teacher>> Teachers => _teachers.AsObservable();    private  BehaviorSubject<List<Teacher>> _teachers { get; }        private static TeacherRepository? _globalRepositoryInstance;    protected TeacherRepository(string path) : base(path)    {    }        public static TeacherRepository GetInstance()    {        return _globalRepositoryInstance ??= new TeacherRepository("/home/darling/RiderProjects/Avalonia.schoolTimetabler/Data/DataSets/Teachers.json");    }    public void Delete(Teacher delEntity)    {        Remove(delEntity);    }    public void Add(Teacher newEntity)    {        Append(newEntity);        return;    }    public List<Teacher> Read()    {        return DeserializationJson();    }    public void DelDiscipline(int indexDiscipline, int indexTeacher)    {        var t = _teachers.Value;        t[indexTeacher].TeacherDisciplines.Remove(t[indexTeacher].TeacherDisciplines[indexDiscipline]);        _teachers.OnNext(t);    }    public List<string> GetTeacherDiscipline(int index)    {        try        {            var teacherDisciplines = AppendDiscipline(index).TeacherDisciplines;            return teacherDisciplines;        }        catch (Exception e)        {            return new List<string>() { "Пусто" };        }    }    public void AddDiscipline(List<string> str, int index)    {        var teachers = AppendDiscipline(index);        var a = AppendDiscipline(index);        teachers.TeacherDisciplines = str;        Change(teachers);    }    public override bool CompareEntities(Teacher entity1, Teacher entity2)    {        return entity1.TeacherFullName == entity2.TeacherFullName && entity1.Id == entity2.Id;    }}